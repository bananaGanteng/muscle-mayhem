local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local plots = workspace:WaitForChild("Plots")

local toggleActive = false
local debounce = false
local resetFromScript = false

local base = nil
local purchasesFolder = nil

do
    local userLower = string.lower(player.Name)
    local displayLower = string.lower(player.DisplayName)
    for _, model in ipairs(plots:GetChildren()) do
        if model:IsA("Model") then
            local found = false
            for _, obj in ipairs(model:GetDescendants()) do
                if obj:IsA("TextLabel") then
                    local txt = string.lower(obj.Text)
                    if string.find(txt, userLower, 1, true) or string.find(txt, displayLower, 1, true) then
                        base = model
                        found = true
                        break
                    end
                end
            end
            if found then break end
        end
    end
end

if base then
    purchasesFolder = base:FindFirstChild("Purchases")
end

local function findObjects()
    if not purchasesFolder then return nil, nil end
    local rem, hit = nil, nil
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil, nil end
    for _, obj in ipairs(purchasesFolder:GetDescendants()) do
        if obj:IsA("TextLabel") and obj.Name == "RemainingTime" then
            rem = obj
        elseif obj:IsA("BasePart") and obj.Name == "Hitbox" then
            local distance = (obj.Position - hrp.Position).Magnitude
            if distance >= 47 and distance <= 60 then
                hit = obj
            end
        end
    end
    return rem, hit
end

local function wiggleWhileCountdown(hrp, label, hitbox)
    local countdownSet = {["4s"]=true, ["3s"]=true, ["2s"]=true, ["1s"]=true, ["0s"]=true}
    if not hrp or not hrp.Parent then return end
    local char = hrp.Parent
    local hum = char:FindFirstChildOfClass("Humanoid")
    if not hum then return end
    if not label then return end
    local centerPos = hitbox and hitbox.Position or hrp.Position
    local amplitude = 2
    local radiusLock = 6
    local stepTime = 0.35
    local direction = 1
    local run = true
    local originalAutoRotate = hum.AutoRotate
    hum.AutoRotate = false
    local function stillValid()
        if not run then return false end
        if not hrp or not hrp.Parent then return false end
        if not hum or hum.Health <= 0 then return false end
        if not label or not label.Parent then return false end
        return countdownSet[label.Text] == true
    end
    task.spawn(function()
        while stillValid() do
            local target = centerPos + Vector3.new(direction * amplitude, 0, 0)
            if hitbox and hitbox.Parent then
                centerPos = hitbox.Position
                target = centerPos + Vector3.new(direction * amplitude, 0, 0)
            end
            hum:MoveTo(target)
            hum.MoveToFinished:Wait(stepTime + 0.2)
            direction = -direction
        end
        run = false
    end)
    local hbConn
    hbConn = RunService.Heartbeat:Connect(function()
        if not stillValid() then
            run = false
            if hbConn then hbConn:Disconnect() end
            return
        end
        if hitbox and hitbox.Parent then
            centerPos = hitbox.Position
        end
        local dist = (hrp.Position - centerPos).Magnitude
        if dist > radiusLock then
            hrp.CFrame = CFrame.new(centerPos + Vector3.new(direction * amplitude * 0.5, 0, 0))
        end
    end)
    task.spawn(function()
        while stillValid() do
            task.wait(0.2)
        end
        run = false
        if hum and hum.Parent then
            hum:Move(Vector3.new(0,0,0))
            hum.AutoRotate = originalAutoRotate
        end
        if hbConn then hbConn:Disconnect() end
    end)
end

local function walkToBase(hitbox)
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart", 5)
    local hum = char:WaitForChild("Humanoid", 5)
    if not (hum and hrp and hitbox) then return end
    local touched = false
    local touchedConn
    touchedConn = hitbox.Touched:Connect(function(part)
        if part:IsDescendantOf(char) then
            touched = true
            touchedConn:Disconnect()
            local countdownLabel, _ = findObjects()
            if countdownLabel then
                wiggleWhileCountdown(hrp, countdownLabel, hitbox)
            end
        end
    end)
    task.spawn(function()
        while not touched and char and hum and hitbox do
            hum:MoveTo(hitbox.Position)
            wait(0.5)
        end
    end)
    local conn
    conn = hum.MoveToFinished:Connect(function(reached)
        conn:Disconnect()
        if reached and touched then
            for i = 1, 2 do
                hum.Jump = true
                wait(1)
            end
        end
    end)
end

local function checkCountdown()
    local checkTimes = {"8s","6s"}
    RunService.RenderStepped:Connect(function()
        if not toggleActive then return end
        local char = player.Character or player.CharacterAdded:Wait()
        local countdownLabel, hitboxPart = findObjects()
        if countdownLabel and not debounce then
            for _, t in ipairs(checkTimes) do
                if countdownLabel.Text == t then
                    local hum = char:FindFirstChildOfClass("Humanoid")
                    if hum then
                        debounce = true
                        resetFromScript = true
                        hum.Health = 0
                        task.spawn(function()
                            player.CharacterAdded:Wait()
                            local _, newHitbox = findObjects()
                            if newHitbox then
                                walkToBase(newHitbox)
                            end
                            task.delay(1, function()
                                debounce = false
                            end)
                        end)
                        break
                    end
                end
            end
        end
    end)
end

local function AutoLockBase_SetEnabled(state)
    if state and not toggleActive then
        toggleActive = true
        if not debounce then
            debounce = true
            resetFromScript = true
            local char = player.Character
            if char then
                local hum = char:FindFirstChildOfClass("Humanoid")
                if hum then hum.Health = 0 end
            end
            player.CharacterAdded:Wait()
            task.delay(0.1, function()
                local _, hitbox = findObjects()
                if hitbox then
                    walkToBase(hitbox)
                end
                debounce = false
                resetFromScript = false
            end)
        end
    elseif (not state) and toggleActive then
        toggleActive = false
    end
end

getgenv().AutoLockBase_SetEnabled = AutoLockBase_SetEnabled

checkCountdown()
